{"version":3,"sources":["webpack:///../packages/component/src/components/tree/demo/demo8.js"],"names":["Demo8","props","state","data","label","key","isLeaf","onLoadData","bind","node","Promise","resolve","children","eventKey","pos","item","getItemByPos","setTimeout","setState","split","slice","reduce","ret","num","this","render","dataSource","loadData","React","Component","_demoSrcFiles","__demo_loader_placeholder__"],"mappings":"opBAGqBA,E,oBACnB,WAAYC,GAAQ,IAAD,SACjB,cAAMA,IAAN,MACKC,MAAQ,CACXC,KAAM,CACJ,CAAEC,MAAO,iBAAkBC,IAAK,KAChC,CAAED,MAAO,iBAAkBC,IAAK,KAChC,CAAED,MAAO,OAAQC,IAAK,IAAKC,QAAQ,KAGvC,EAAKC,WAAa,EAAKA,WAAWC,K,yHAAhB,KATD,E,kHAYnBD,WAAA,SAAWE,GAAO,IAAD,OACf,OAAO,IAAIC,SAAQ,SAAAC,GACjB,GAAIF,EAAKR,MAAMW,SACb,OAAOD,IAFmB,MAKFF,EAAKR,MAAvBY,EALoB,EAKpBA,SAAUC,EALU,EAKVA,IACZC,EAAO,EAAKC,aAAaF,GAC/BG,YAAW,WACTF,EAAKH,SAAW,CACd,CAAER,MAAO,aAAcC,IAAQQ,EAAL,MAC1B,CAAET,MAAO,aAAcC,IAAQQ,EAAL,OAE5B,EAAKK,SAAS,CACZf,KAAK,EAAK,EAAKD,MAAMC,QAEvBQ,MACC,S,EAIPK,aAAA,SAAaF,GACX,OAAOA,EAAIK,MAAM,KAAKC,MAAM,GAAGC,QAAO,SAACC,EAAKC,GAAN,OAAcD,EAAIV,SAASW,KAAM,CAAEX,SAAUY,KAAKtB,MAAMC,Q,EAGhGsB,OAAA,WACE,OACE,kBAAC,OAAD,CAAMC,WAAYF,KAAKtB,MAAMC,KAAMwB,SAAUH,KAAKjB,c,GAxCrBqB,IAAMC,WA6C1BC,EAAgBC","file":"392-bb8f00627e6c951d80e4.js","sourcesContent":["import React from 'react'\nimport { Tree } from '@alicloud/console-components'\n\nexport default class Demo8 extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      data: [\n        { label: 'Expand to load', key: '0', },\n        { label: 'Expand to load', key: '1' },\n        { label: 'Leaf', key: '2', isLeaf: true }\n      ]\n    }\n    this.onLoadData = this.onLoadData.bind(this)\n  }\n\n  onLoadData(node) {\n    return new Promise(resolve => {\n      if (node.props.children) {\n        return resolve();\n      }\n\n      const { eventKey, pos } = node.props\n      const item = this.getItemByPos(pos)\n      setTimeout(() => {\n        item.children = [\n          { label: 'Child Tree', key: `${eventKey}-0` },\n          { label: 'Child Tree', key: `${eventKey}-1` }\n        ]\n        this.setState({\n          data: [...this.state.data]\n        })\n        resolve();\n      }, 1000)\n    })\n  }\n\n  getItemByPos(pos) {\n    return pos.split('-').slice(1).reduce((ret, num) => ret.children[num], { children: this.state.data });\n  }\n\n  render() {\n    return (\n      <Tree dataSource={this.state.data} loadData={this.onLoadData} />\n    )\n  }\n}\n;\n  export const _demoSrcFiles = __demo_loader_placeholder__"],"sourceRoot":""}