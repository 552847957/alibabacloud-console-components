{"version":3,"sources":["webpack:///../packages/component/src/components/tree/demo/demo9.js"],"names":["TreeNode","Tree","Node","gData","generateData","_level","_preKey","_tns","preKey","tns","children","i","key","push","label","level","forEach","index","Demo9","props","state","onDrop","info","ar","dragKey","dragNode","eventKey","dropKey","node","dropPosition","loop","data","callback","item","arr","this","splice","ragObj","dragObj","setState","render","draggable","selectable","isLabelBlock","defaultExpandedKeys","bind","map","React","Component","_demoSrcFiles","__demo_loader_placeholder__"],"mappings":"0nBAGA,IAAMA,EAAWC,OAAKC,KAKhBC,EAAQ,IAEO,SAAfC,EAAgBC,EAAQC,EAASC,GAKrC,IAJA,IAAMC,EAASF,GAAW,IACpBG,EAAMF,GAAQJ,EAEdO,EAAW,GACRC,EAAI,EAAGA,EAVR,EAUeA,IAAK,CAC1B,IAAMC,EAASJ,EAAN,IAAgBG,EACzBF,EAAII,KAAK,CAAEC,MAAOF,EAAKA,QACnBD,EAZE,GAaJD,EAASG,KAAKD,GAGlB,GAAIP,EAAS,EACX,OAAOI,EAET,IAAMM,EAAQV,EAAS,EACvBK,EAASM,SAAQ,SAACJ,EAAKK,GAErB,OADAR,EAAIQ,GAAOP,SAAW,GACfN,EAAaW,EAAOH,EAAKH,EAAIQ,GAAOP,aAG/CN,CAxBU,G,IA0BWc,E,oBACnB,WAAYC,GAAQ,IAAD,SACjB,cAAMA,IAAN,MACKC,MAAQ,CACXjB,SAHe,E,kHAOnBkB,OAAA,SAAOC,GACL,IAyBMC,EACAZ,EA1BAa,EAAUF,EAAKG,SAASN,MAAMO,SAC9BC,EAAUL,EAAKM,KAAKT,MAAMO,SAC1BG,EAAeP,EAAKO,aACpBC,EAAO,SAAPA,EAAQC,EAAMnB,EAAKoB,GACvBD,EAAKf,SAAQ,SAACiB,EAAMhB,EAAOiB,GACzB,OAAID,EAAKrB,MAAQA,EACRoB,EAASC,EAAMhB,EAAOiB,GAE3BD,EAAKvB,SACAoB,EAAKG,EAAKvB,SAAUE,EAAKoB,QADlC,MAKED,EAAI,EAAOI,KAAKf,MAAMjB,QAE5B2B,EAAKC,EAAMP,GAAS,SAACS,EAAMhB,EAAOiB,GAChCA,EAAIE,OAAOnB,EAAO,GAClBoB,OAASJ,KAEe,IAAtBX,EAAKO,cACPC,EAAKC,EAAMJ,GAAS,SAACM,GACnBA,EAAKvB,SAAWuB,EAAKvB,UAAY,GACjCuB,EAAKvB,SAASG,UARdyB,OAaFR,EAAKC,EAAMJ,GAAS,SAACM,EAAMhB,EAAOiB,GAChCX,EAAKW,EACLvB,EAAIM,MAEgB,IAAlBY,EACFN,EAAGa,OAAOzB,EAAG,OAlBb2B,GAoBAf,EAAGa,OAAOzB,EAAI,EAAG,OApBjB2B,IAuBJH,KAAKI,SAAS,CACZpC,MAAO4B,K,EAIXS,OAAA,WAQE,OACE,kBAAC,OAAD,CAAMC,WAAS,EAACC,YAAY,EAAOC,cAAY,EAACC,oBAAqB,CAAC,MAAO,QAAS,WAAYvB,OAAQc,KAAKd,OAAOwB,KAAKV,OARhH,SAAPL,EAAOC,GAAI,OAAIA,EAAKe,KAAI,SAAAb,GAC5B,OAAIA,EAAKvB,SACA,kBAACV,EAAD,CAAUY,IAAKqB,EAAKrB,IAAKE,MAAOmB,EAAKrB,KAAMkB,EAAKG,EAAKvB,WAEvD,kBAACV,EAAD,CAAUY,IAAKqB,EAAKrB,IAAKE,MAAOmB,EAAKrB,SAKzCkB,CAAKK,KAAKf,MAAMjB,S,GA7DU4C,IAAMC,WAkE1BC,EAAgBC","file":"393-372328bff90d487df795.js","sourcesContent":["import React from 'react'\nimport { Tree } from '@alicloud/console-components'\n\nconst TreeNode = Tree.Node\n\nconst x = 3\nconst y = 2\nconst z = 1\nconst gData = []\n\nconst generateData = (_level, _preKey, _tns) => {\n  const preKey = _preKey || '0'\n  const tns = _tns || gData\n\n  const children = []\n  for (let i = 0; i < x; i++) {\n    const key = `${preKey}-${i}`\n    tns.push({ label: key, key })\n    if (i < y) {\n      children.push(key);\n    }\n  }\n  if (_level < 0) {\n    return tns\n  }\n  const level = _level - 1\n  children.forEach((key, index) => {\n    tns[index].children = [];\n    return generateData(level, key, tns[index].children);\n  })\n}\ngenerateData(z)\n\nexport default class Demo9 extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      gData\n    }\n  }\n\n  onDrop(info) {\n    const dragKey = info.dragNode.props.eventKey\n    const dropKey = info.node.props.eventKey\n    const dropPosition = info.dropPosition\n    const loop = (data, key, callback) => {\n      data.forEach((item, index, arr) => {\n        if (item.key === key) {\n          return callback(item, index, arr)\n        }\n        if (item.children) {\n          return loop(item.children, key, callback)\n        }\n      })\n    }\n    const data = [...this.state.gData]\n    let dragObj\n    loop(data, dragKey, (item, index, arr) => {\n      arr.splice(index, 1)\n      ragObj = item\n    })\n    if (info.dropPosition === 0) {\n      loop(data, dropKey, (item) => {\n        item.children = item.children || []\n        item.children.push(dragObj)\n      })\n    } else {\n      let ar\n      let i\n      loop(data, dropKey, (item, index, arr) => {\n        ar = arr\n        i = index\n      })\n      if (dropPosition === -1) {\n        ar.splice(i, 0, dragObj);\n      } else {\n        ar.splice(i + 1, 0, dragObj);\n      }\n    }\n    this.setState({\n      gData: data,\n    })\n  }\n  \n  render() {\n    const loop = data => data.map(item => {\n      if (item.children) {\n        return <TreeNode key={item.key} label={item.key}>{loop(item.children)}</TreeNode>;\n      }\n      return <TreeNode key={item.key} label={item.key} />;\n    })\n\n    return (\n      <Tree draggable selectable={false} isLabelBlock defaultExpandedKeys={['0-0', '0-0-0', '0-0-0-0']} onDrop={this.onDrop.bind(this)}>\n        {loop(this.state.gData)}\n      </Tree>\n    )\n  }\n};\n  export const _demoSrcFiles = __demo_loader_placeholder__"],"sourceRoot":""}