{"version":3,"sources":["webpack:///../packages/component/src/components/form/demo/demo12.js"],"names":["CheckboxGroup","Checkbox","Group","FormDemo","props","field","Field","onChange","name","value","console","log","getValues","dispatch","type","payload","componentWillReceiveProps","nextProps","this","setValues","formData","setEmail","email","setName","username","setGroup","fruit","render","Item","required","requiredMessage","defaultValue","dataSource","label","onClick","bind","React","Component","ReduxFormDemo","connect","state","formReducer","store","createStore","combineReducers","action","Demo12","demoMeta","zhName","zhDesc","_demoSrcFiles","__demo_loader_placeholder__"],"mappings":"4oBAWA,IAAMA,EAAgBC,WAASC,M,IAgBzBC,E,oBACJ,WAAYC,GAAQ,IAAD,SACjB,cAAMA,IAAN,MACKC,MAAQ,IAAIC,Q,yHAAJ,IAAgB,CAC3BC,SAAU,SAACC,EAAMC,GAAW,IAAD,EACzBC,QAAQC,IAAI,WAAYH,EAAMC,EAAO,EAAKJ,MAAMO,aAChD,EAAKR,MAAMS,SAAS,CAClBC,KAAM,cACNC,SAAO,OACJP,GAAOC,EADH,QAPI,E,kHAqBnBO,0BAAA,SAA0BC,GACxBC,KAAKb,MAAMc,UAAUF,EAAUG,W,EAGjCC,SAAA,WACEH,KAAKd,MAAMS,SAAS,CAClBC,KAAM,cACNC,QAAS,CACPO,MAAO,mB,EAKbC,QAAA,WACEL,KAAKd,MAAMS,SAAS,CAClBC,KAAM,cACNC,QAAS,CACPS,SAAU,Y,EAKhBC,SAAA,WACEP,KAAKd,MAAMS,SAAS,CAClBC,KAAM,cACNC,QAAS,CACPW,MAAO,CAAC,Y,EAKdC,OAAA,WACE,OACE,kBAAC,OAAD,CAAMtB,MAAOa,KAAKb,OAChB,kBAAC,OAAKuB,KAAN,CAAWC,UAAQ,EAACC,gBAAgB,aAClC,kBAAC,QAAD,CAAOtB,KAAK,WAEd,kBAAC,OAAKoB,KAAN,CAAWC,UAAQ,EAACC,gBAAgB,aAClC,kBAAC,QAAD,CAAOtB,KAAK,WAAWuB,aAAcb,KAAKd,MAAMgB,SAASI,YAE3D,kBAAC,OAAKI,KAAN,CAAWC,UAAQ,EAACC,gBAAgB,aAClC,kBAAC9B,EAAD,CACEQ,KAAK,QACLwB,WAAY,CACV,CAAEC,MAAO,QAASxB,MAAO,SACzB,CAAEwB,MAAO,OAAQxB,MAAO,SAE1BsB,aAAcb,KAAKd,MAAMgB,SAASM,SAGtC,qCAAWR,KAAKd,MAAMkB,OAASJ,KAAKd,MAAMkB,MAAMb,OAChD,kBAAC,SAAD,CAAQyB,QAAShB,KAAKG,SAASc,KAAKjB,OAApC,YACA,kBAAC,SAAD,CAAQgB,QAAShB,KAAKK,QAAQY,KAAKjB,OAAnC,WACA,kBAAC,SAAD,CAAQgB,QAAShB,KAAKO,SAASU,KAAKjB,OAApC,c,GA3EekB,IAAMC,WAiFvBC,EAAgBC,aAAQ,SAAAC,GAC5B,MAAO,CACLpB,SAAUoB,EAAMC,eAFEF,CAInBpC,GAEGuC,EAAQC,YACZC,YAAgB,CACdH,YAxGJ,SACED,EACAK,GAEA,YADA,IAFAL,MAAQ,CAAElB,MAAO,GAAIE,SAAU,SAAUE,MAAO,CAAC,WAGzCmB,EAAO/B,MACb,IAAK,cACH,O,+VAAO,CAAP,GACK0B,EADL,GAEKK,EAAO9B,SAEd,QACE,OAAOyB,OAyGEM,UARA,kBACb,kBAAC,IAAD,CAAUJ,MAAOA,GACf,6BACE,kBAACJ,EAAD,SAOC,IAAMS,EAAW,CACtBC,OAAO,YACPC,OAAO,uEAGMC,EAAgBC","file":"110-6030dfa31d4e7a73d561.js","sourcesContent":["import React from 'react'\nimport {\n  Form,\n  Input,\n  Button,\n  Checkbox,\n  Field,\n} from '@alicloud/console-components'\nimport { combineReducers, createStore } from 'redux'\nimport { Provider, connect } from 'react-redux'\n\nconst CheckboxGroup = Checkbox.Group\nfunction formReducer(\n  state = { email: '', username: 'xiachi', fruit: ['apple'] },\n  action\n) {\n  switch (action.type) {\n    case 'save_fields':\n      return {\n        ...state,\n        ...action.payload,\n      }\n    default:\n      return state\n  }\n}\n\nclass FormDemo extends React.Component {\n  constructor(props) {\n    super(props)\n    this.field = new Field(this, {\n      onChange: (name, value) => {\n        console.log('onChange', name, value, this.field.getValues())\n        this.props.dispatch({\n          type: 'save_fields',\n          payload: {\n            [name]: value,\n          },\n        })\n        /* Method 2, Updates all values.\n                 this.props.dispatch({\n                 type: 'save_fields',\n                 payload: this.field.getValues()\n                 });\n                 */\n      },\n    })\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.field.setValues(nextProps.formData)\n  }\n\n  setEmail() {\n    this.props.dispatch({\n      type: 'save_fields',\n      payload: {\n        email: 'qq@gmail.com',\n      },\n    })\n  }\n\n  setName() {\n    this.props.dispatch({\n      type: 'save_fields',\n      payload: {\n        username: 'frank',\n      },\n    })\n  }\n\n  setGroup() {\n    this.props.dispatch({\n      type: 'save_fields',\n      payload: {\n        fruit: ['pear'],\n      },\n    })\n  }\n\n  render() {\n    return (\n      <Form field={this.field}>\n        <Form.Item required requiredMessage=\"required!\">\n          <Input name=\"email\" />\n        </Form.Item>\n        <Form.Item required requiredMessage=\"required!\">\n          <Input name=\"username\" defaultValue={this.props.formData.username} />\n        </Form.Item>\n        <Form.Item required requiredMessage=\"required!\">\n          <CheckboxGroup\n            name=\"fruit\"\n            dataSource={[\n              { label: 'Apple', value: 'apple' },\n              { label: 'Pear', value: 'pear' },\n            ]}\n            defaultValue={this.props.formData.fruit}\n          />\n        </Form.Item>\n        <p>email: {this.props.email && this.props.email.value}</p>\n        <Button onClick={this.setEmail.bind(this)}>setEmail</Button>\n        <Button onClick={this.setName.bind(this)}>setName</Button>\n        <Button onClick={this.setGroup.bind(this)}>setGroup</Button>\n      </Form>\n    )\n  }\n}\n\nconst ReduxFormDemo = connect(state => {\n  return {\n    formData: state.formReducer,\n  }\n})(FormDemo)\n\nconst store = createStore(\n  combineReducers({\n    formReducer,\n  })\n)\n\nconst Demo12 = () => (\n  <Provider store={store}>\n    <div>\n      <ReduxFormDemo />\n    </div>\n  </Provider>\n)\n\nexport default Demo12\n\nexport const demoMeta = {\n  zhName: `配合redux使用`,\n  zhDesc: `在\\`redux\\`中结合 \\`componentWillReceiveProps\\` \\`setValues\\` 使用， 配合 Field 使用`,\n}\n;\n  export const _demoSrcFiles = __demo_loader_placeholder__"],"sourceRoot":""}