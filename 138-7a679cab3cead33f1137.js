(window.webpackJsonp=window.webpackJsonp||[]).push([[138],{Ep4g:function(n,e,t){"use strict";t.r(e),t.d(e,"demoMeta",(function(){return a})),t.d(e,"_demoSrcFiles",(function(){return c}));var r=t("mXGw"),o=t.n(r),s=t("BgHK"),l=t("UutA");e.default=function(){var n=s.Field.useField(),e=n.init,t=n.getError,r=n.setError,l=n.setErrors;return o.a.createElement(i,null,o.a.createElement(s.Input,e("input",{rules:[{required:!0,pattern:/hello/,message:"must be hello"}]})),o.a.createElement("br",null),o.a.createElement("span",{style:{color:"red"}},t("input")),o.a.createElement("br",null),o.a.createElement(s.Button,{onClick:function(){r("input","set error 1")}},"setError"),o.a.createElement(s.Button,{onClick:function(){l({input:"set error 2"})}},"setErrors"),o.a.createElement(s.Button,{onClick:function(){l({input:""})}},"clear"),o.a.createElement("br",null),o.a.createElement("br",null),o.a.createElement(s.Input,e("input2")),o.a.createElement("br",null),o.a.createElement("span",{style:{color:"red"}},t("input2")),o.a.createElement("br",null),o.a.createElement(s.Button,{onClick:function(){r("input2","errors will be removed by onChange")}},"setError"))};var a={zhName:"自定义错误",zhDesc:"自己控制组件的errors"},i=l.default.div.withConfig({displayName:"demo4__SWrapper",componentId:"sc-1ipoph9-0"})([".next-btn{margin-right:8px;}"]),c={".babelrc":'{\n  "presets": ["env"],\n  "plugins": [\n    "transform-runtime",\n    [\n      "transform-react-jsx",\n      {\n        "pragma": "React.createElement"\n      }\n    ],\n    "@babel/plugin-proposal-class-properties"\n  ],\n  "parserOpts": {\n    "plugins": ["dynamicImport"]\n  }\n}\n',"package.json":'{\n  "name": "parcel-sandbox",\n  "version": "1.0.0",\n  "description": "Simple Parcel Sandbox",\n  "main": "index.html",\n  "scripts": {\n    "start": "parcel index.html --open",\n    "build": "parcel build index.html"\n  },\n  "dependencies": {\n    "react": "16.8.6",\n    "react-dom": "16.8.6",\n    "@alicloud/console-components": "latest",\n    "styled-components": "^4.2.0",\n    "moment": "^2.21.0",\n    "react-copy-to-clipboard": "^5.0.1",\n    "react-dnd": "^8.0.0",\n    "react-dnd-html5-backend": "^8.0.0"\n  },\n  "devDependencies": {\n    "@babel/core": "7.2.0",\n    "parcel-bundler": "^1.6.1",\n    "typescript": "^3.7.2",\n    "@types/styled-components": "^4.1.8",\n    "@types/react": "16.8.8",\n    "@types/react-dom": "16.8.2"\n  }\n}\n',"sandbox.config.json":'{\n  "infiniteLoopProtection": true,\n  "hardReloadOnChange": false,\n  "view": "browser"\n}',"src/styles.less":"","index.html":'<!DOCTYPE html>\n<html>\n  <head>\n    <title>Parcel Sandbox</title>\n    <meta charset="UTF-8" />\n  </head>\n\n  <body>\n    <div id="app"></div>\n\n    <script src="src/index.jsx"><\/script>\n  </body>\n</html>\n',"src/index.jsx":'import * as React from "react";\nimport { render } from "react-dom";\nimport "@alicloud/console-components/dist/wind.css";\nimport App from "./demo/demo4";\nimport "./styles.less";\n\nconst rootElement = document.getElementById("app");\nrender(<App />, rootElement);\n',"src/demo/demo4.js":"import React from 'react'\nimport { Input, Button, Field } from '@alicloud/console-components'\nimport styled from 'styled-components'\n\nconst Demo4 = () => {\n  const myField = Field.useField()\n\n  const { init, getError, setError, setErrors } = myField\n  return (\n    <SWrapper>\n      <Input\n        {...init('input', {\n          rules: [\n            {\n              required: true,\n              pattern: /hello/,\n              message: 'must be hello',\n            },\n          ],\n        })}\n      />\n      <br />\n      <span style={{ color: 'red' }}>{getError('input')}</span>\n\n      <br />\n      <Button\n        onClick={() => {\n          setError('input', 'set error 1')\n        }}\n      >\n        setError\n      </Button>\n\n      <Button\n        onClick={() => {\n          setErrors({ input: 'set error 2' })\n        }}\n      >\n        setErrors\n      </Button>\n\n      <Button\n        onClick={() => {\n          setErrors({ input: '' })\n        }}\n      >\n        clear\n      </Button>\n      <br />\n      <br />\n      <Input {...init('input2')} />\n      <br />\n      <span style={{ color: 'red' }}>{getError('input2')}</span>\n      <br />\n\n      <Button\n        onClick={() => {\n          setError('input2', 'errors will be removed by onChange')\n        }}\n      >\n        setError\n      </Button>\n    </SWrapper>\n  )\n}\n\nexport default Demo4\n\nexport const demoMeta = {\n  zhName: `自定义错误`,\n  zhDesc: `自己控制组件的errors`,\n}\n\nconst SWrapper = styled.div`\n  .next-btn {\n    margin-right: 8px;\n  }\n`\n","demoMeta.json":'{"entryPath":"src/demo/demo4.js"}'}}}]);
//# sourceMappingURL=138-7a679cab3cead33f1137.js.map