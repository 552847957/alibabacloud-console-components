(window.webpackJsonp=window.webpackJsonp||[]).push([[102],{"6ya9":function(e,n,t){"use strict";t.r(n),t.d(n,"default",(function(){return u})),t.d(n,"demoMeta",(function(){return d})),t.d(n,"_demoSrcFiles",(function(){return m}));t("1c7q");var r=t("mXGw"),a=t.n(r),o=t("BgHK"),l=t("UutA");function i(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var s=o.Checkbox.Group,c=[{value:"apple",label:"apple"},{value:"pear",label:"pear"},{value:"orange",label:"orange"}],u=function(e){var n,t;function r(){for(var n,t=arguments.length,r=new Array(t),a=0;a<t;a++)r[a]=arguments[a];return(n=e.call.apply(e,[this].concat(r))||this).state={checkboxStatus:!0},n.field=new o.Field(i(n),{scrollToFirstError:-10}),n}t=e,(n=r).prototype=Object.create(t.prototype),n.prototype.constructor=n,n.__proto__=t;var l=r.prototype;return l.isChecked=function(e,n,t){n?t():t("consent agreement not checked ")},l.userName=function(e,n,t){"frank"===n?setTimeout((function(){return t("name existed")}),200):setTimeout((function(){return t()}),200)},l.render=function(){var e=this,n=this.field.init;return a.a.createElement(p,null,a.a.createElement(o.Input,n("input",{initValue:"delete all",rules:{required:!0}})),this.field.getError("input")?a.a.createElement("span",{style:{color:"red"}},this.field.getError("input").join(",")):"",a.a.createElement("br",null),a.a.createElement("br",null),a.a.createElement(o.Input,Object.assign({placeholder:"try onBlur"},n("input1",{rules:[{required:!0,message:"can not be empty",trigger:["onBlur"]}]}))),this.field.getError("input1")?a.a.createElement("span",{style:{color:"red"}},this.field.getError("input1").join(",")):"",a.a.createElement("br",null),a.a.createElement("br",null),a.a.createElement(o.Input,Object.assign({defaultValue:"",placeholder:"try frank"},n("username",{rules:[{validator:this.userName,trigger:["onBlur","onChange"]}]}))),"loading"===this.field.getState("username")?"validating...":"",this.field.getError("username")?a.a.createElement("span",{style:{color:"red"}},this.field.getError("username").join(",")):"",a.a.createElement("br",null),a.a.createElement("br",null),"agreement:",a.a.createElement(o.Checkbox,n("checkbox",{valueName:"checked",rules:[{validator:this.isChecked}]})),this.field.getError("checkbox")?a.a.createElement("span",{style:{color:"red"}},this.field.getError("checkbox").join(",")):"",a.a.createElement("br",null),a.a.createElement("br",null),a.a.createElement(o.Input.TextArea,Object.assign({placeholder:">3 and <10"},n("textarea",{rules:[{required:!0,minLength:3,maxLength:10}]}))),this.field.getError("textarea")?a.a.createElement("span",{style:{color:"red"}},this.field.getError("textarea").join(",")):"",a.a.createElement("br",null),a.a.createElement("br",null),this.state.checkboxStatus?a.a.createElement("div",null,"Array validate：",a.a.createElement(s,Object.assign({dataSource:c},n("checkboxgroup",{rules:[{required:!0,type:"array",message:"choose one please"}]}),{style:{marginBottom:10}})),this.field.getError("checkboxgroup")?a.a.createElement("span",{style:{color:"red"}},this.field.getError("checkboxgroup").join(",")):""):null,a.a.createElement("br",null),a.a.createElement("br",null),a.a.createElement(o.Button,{type:"primary",onClick:function(){e.field.validate((function(e,n){console.log(e,n)}))}},"validate"),a.a.createElement(o.Button,{onClick:function(){e.field.reset()}},"reset"),a.a.createElement(o.Button,{onClick:function(){e.state.checkboxStatus?(e.setState({checkboxStatus:!1}),e.field.remove("checkboxgroup")):e.setState({checkboxStatus:!0})}},this.state.checkboxStatus?"delete":"restore"))},r}(a.a.Component),d={zhName:"校验",zhDesc:"校验的错误信息需要用`getError`获取\n\n\t注意：Form 和 Field 做了深度结合，在 Form 中使用Field，错误信息不需`getError`获取会自动展现。"},p=l.default.div.withConfig({displayName:"demo5__SWrapper",componentId:"mzmpm2-0"})([".next-btn{margin-right:8px;}"]),m={"index.html":'<!DOCTYPE html>\n<html>\n  <head>\n    <title>Parcel Sandbox</title>\n    <meta charset="UTF-8" />\n  </head>\n\n  <body>\n    <div id="app"></div>\n\n    <script src="src/index.jsx"><\/script>\n  </body>\n</html>\n',".babelrc":'{\n  "presets": ["env"],\n  "plugins": [\n    "transform-runtime",\n    [\n      "transform-react-jsx",\n      {\n        "pragma": "React.createElement"\n      }\n    ],\n    "@babel/plugin-proposal-class-properties"\n  ],\n  "parserOpts": {\n    "plugins": ["dynamicImport"]\n  }\n}\n',"package.json":'{\n  "name": "parcel-sandbox",\n  "version": "1.0.0",\n  "description": "Simple Parcel Sandbox",\n  "main": "index.html",\n  "scripts": {\n    "start": "parcel index.html --open",\n    "build": "parcel build index.html"\n  },\n  "dependencies": {\n    "react": "16.8.6",\n    "react-dom": "16.8.6",\n    "@alicloud/console-components": "latest",\n    "styled-components": "^4.2.0",\n    "moment": "^2.21.0",\n    "react-copy-to-clipboard": "^5.0.1",\n    "react-dnd": "^8.0.0",\n    "react-dnd-html5-backend": "^8.0.0"\n  },\n  "devDependencies": {\n    "@babel/core": "7.2.0",\n    "parcel-bundler": "^1.6.1",\n    "typescript": "^3.7.2",\n    "@types/styled-components": "^4.1.8",\n    "@types/react": "16.8.8",\n    "@types/react-dom": "16.8.2"\n  }\n}\n',"sandbox.config.json":'{\n  "infiniteLoopProtection": true,\n  "hardReloadOnChange": false,\n  "view": "browser"\n}',"src/index.jsx":'import * as React from "react";\nimport { render } from "react-dom";\nimport "@alicloud/console-components/dist/wind.css";\nimport App from "./demo/demo5";\nimport "./styles.less";\n\nconst rootElement = document.getElementById("app");\nrender(<App />, rootElement);\n',"src/styles.less":"","src/demo/demo5.js":"import React from 'react'\nimport { Input, Button, Field, Checkbox } from '@alicloud/console-components'\nimport styled from 'styled-components'\n\nconst CheckboxGroup = Checkbox.Group\n\nconst list = [\n  {\n    value: 'apple',\n    label: 'apple',\n  },\n  {\n    value: 'pear',\n    label: 'pear',\n  },\n  {\n    value: 'orange',\n    label: 'orange',\n  },\n]\n\nexport default class Demo5 extends React.Component {\n  state = {\n    checkboxStatus: true,\n  }\n\n  field = new Field(this, { scrollToFirstError: -10 })\n\n  isChecked(rule, value, callback) {\n    if (!value) {\n      callback('consent agreement not checked ')\n    } else {\n      callback()\n    }\n  }\n\n  userName(rule, value, callback) {\n    if (value === 'frank') {\n      setTimeout(() => callback('name existed'), 200)\n    } else {\n      setTimeout(() => callback(), 200)\n    }\n  }\n\n  render() {\n    const { init } = this.field\n\n    return (\n      <SWrapper>\n        <Input\n          {...init('input', {\n            initValue: 'delete all',\n            rules: { required: true },\n          })}\n        />\n        {this.field.getError('input') ? (\n          <span style={{ color: 'red' }}>\n            {this.field.getError('input').join(',')}\n          </span>\n        ) : (\n          ''\n        )}\n        <br />\n        <br />\n        <Input\n          placeholder=\"try onBlur\"\n          {...init('input1', {\n            rules: [\n              {\n                required: true,\n                message: 'can not be empty',\n                trigger: ['onBlur'],\n              },\n            ],\n          })}\n        />\n        {this.field.getError('input1') ? (\n          <span style={{ color: 'red' }}>\n            {this.field.getError('input1').join(',')}\n          </span>\n        ) : (\n          ''\n        )}\n        <br />\n        <br />\n        <Input\n          defaultValue=\"\"\n          placeholder=\"try frank\"\n          {...init('username', {\n            rules: [\n              {\n                validator: this.userName,\n                trigger: ['onBlur', 'onChange'],\n              },\n            ],\n          })}\n        />\n        {this.field.getState('username') === 'loading' ? 'validating...' : ''}\n        {this.field.getError('username') ? (\n          <span style={{ color: 'red' }}>\n            {this.field.getError('username').join(',')}\n          </span>\n        ) : (\n          ''\n        )}\n        <br />\n        <br />\n        agreement:\n        <Checkbox\n          {...init('checkbox', {\n            valueName: 'checked',\n            rules: [{ validator: this.isChecked }],\n          })}\n        />\n        {this.field.getError('checkbox') ? (\n          <span style={{ color: 'red' }}>\n            {this.field.getError('checkbox').join(',')}\n          </span>\n        ) : (\n          ''\n        )}\n        <br />\n        <br />\n        <Input.TextArea\n          placeholder=\">3 and <10\"\n          {...init('textarea', {\n            rules: [\n              {\n                required: true,\n                minLength: 3,\n                maxLength: 10,\n              },\n            ],\n          })}\n        />\n        {this.field.getError('textarea') ? (\n          <span style={{ color: 'red' }}>\n            {this.field.getError('textarea').join(',')}\n          </span>\n        ) : (\n          ''\n        )}\n        <br />\n        <br />\n        {this.state.checkboxStatus ? (\n          <div>\n            Array validate：\n            <CheckboxGroup\n              dataSource={list}\n              {...init('checkboxgroup', {\n                rules: [\n                  {\n                    required: true,\n                    type: 'array',\n                    message: 'choose one please',\n                  },\n                ],\n              })}\n              style={{ marginBottom: 10 }}\n            />\n            {this.field.getError('checkboxgroup') ? (\n              <span style={{ color: 'red' }}>\n                {this.field.getError('checkboxgroup').join(',')}\n              </span>\n            ) : (\n              ''\n            )}\n          </div>\n        ) : null}\n        <br />\n        <br />\n        <Button\n          type=\"primary\"\n          onClick={() => {\n            this.field.validate((errors, values) => {\n              console.log(errors, values)\n            })\n          }}\n        >\n          validate\n        </Button>\n        <Button\n          onClick={() => {\n            this.field.reset()\n          }}\n        >\n          reset\n        </Button>\n        <Button\n          onClick={() => {\n            if (this.state.checkboxStatus) {\n              this.setState({ checkboxStatus: false })\n              this.field.remove('checkboxgroup')\n            } else {\n              this.setState({ checkboxStatus: true })\n            }\n          }}\n        >\n          {this.state.checkboxStatus ? 'delete' : 'restore'}\n        </Button>\n      </SWrapper>\n    )\n  }\n}\n\nexport const demoMeta = {\n  zhName: `校验`,\n  zhDesc: `校验的错误信息需要用\\`getError\\`获取\n\n\t注意：Form 和 Field 做了深度结合，在 Form 中使用Field，错误信息不需\\`getError\\`获取会自动展现。`,\n}\n\nconst SWrapper = styled.div`\n  .next-btn {\n    margin-right: 8px;\n  }\n`\n","demoMeta.json":'{"entryPath":"src/demo/demo5.js"}'}}}]);
//# sourceMappingURL=102-57cd5ec391e27697444f.js.map