{"version":3,"sources":["webpack:///../packages/component/src/components/range/demo/demo4.js"],"names":["Demo4","props","state","value","doubleValue","onChange","console","log","this","setState","onProcess","onChangeDouble","render","style","width","margin","marginTop","bind","min","max","marks","defaultValue","slider","React","Component","_demoSrcFiles","__demo_loader_placeholder__"],"mappings":"mOAGqBA,E,oBACnB,WAAYC,GAAQ,IAAD,SACjB,cAAMA,IAAN,MACKC,MAAQ,CACXC,MAAO,IACPC,YAAa,CAAC,GAAI,KAJH,E,kHASnBC,SAAA,SAASF,GACPG,QAAQC,IAAI,kBAAmBJ,GAC/BK,KAAKC,SAAS,CAACN,W,EAIjBO,UAAA,SAAUP,GACRK,KAAKC,SAAS,CAACN,UACfG,QAAQC,IAAI,cAAeJ,I,EAG7BQ,eAAA,SAAeR,GACbK,KAAKC,SAAS,CACZL,YAAaD,K,EAGjBS,OAAA,WACE,OACE,yBAAKC,MAAO,CAACC,MAAO,QAASC,OAAQ,SACnC,6CACA,yBAAKF,MAAO,CAACC,MAAO,QAASE,UAAW,SACtC,kBAAC,QAAD,CAAOb,MAAOK,KAAKN,MAAMC,MAAOE,SAAUG,KAAKH,SAASY,KAAKT,MAC1DE,UAAWF,KAAKE,UAAUO,KAAKT,MAC/BU,IAAK,EAAGC,IAAK,KAAMC,MAAO,CAAC,EAAG,SAEnC,8DACA,yBAAKP,MAAO,CAACC,MAAO,QAASE,UAAW,SACtC,kBAAC,QAAD,CAAOK,aAAc,IAAKlB,MAAO,IAC/BO,UAAWF,KAAKE,UAAUO,KAAKT,MAC/BU,IAAK,EAAGC,IAAK,KAAMC,MAAO,CAAC,EAAG,SAElC,uDACE,yBAAKP,MAAO,CAACC,MAAO,QAASE,UAAW,SACtC,kBAAC,QAAD,CAAOM,OAAO,SAASnB,MAAOK,KAAKN,MAAME,YAAaC,SAAUG,KAAKG,eAAeM,KAAKT,MACvFE,UAAWF,KAAKE,UAAUO,KAAKT,MAC/BU,IAAK,EAAGC,IAAK,KAAMC,MAAO,CAAC,EAAG,W,GA7CTG,IAAMC,WAmD1BC,EAAgBC","file":"219-f0a75f6b04fe38c92306.js","sourcesContent":["import React from 'react'\nimport { Range } from '@alicloud/console-components'\n\nexport default class Demo4 extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: 128,\n      doubleValue: [10, 30]\n    }\n  }\n\n    //Controlled. onChange will be triggered when startValue isn't equal to endValue after sliding\n  onChange(value) {\n    console.log('onChange value:', value)\n    this.setState({value})\n  }\n\n    // This callback will be triggered when startValue and endValue aren't equal after mousedown/mousemove. You shouldn't call setState here.\n  onProcess(value) {\n    this.setState({value})\n    console.log('onProcess: ', value)\n  }\n\n  onChangeDouble(value) {\n    this.setState({\n      doubleValue: value\n    })\n  }\n  render() {\n    return (\n      <div style={{width: '400px', margin: '50px'}}>\n        <p>range 0 ~ 1024</p>\n        <div style={{width: '400px', marginTop: '50px'}}>\n          <Range value={this.state.value} onChange={this.onChange.bind(this)}\n             onProcess={this.onProcess.bind(this)}\n             min={0} max={1024} marks={[0, 1024]} />\n        </div>\n        <p>with value and without onChange</p>\n        <div style={{width: '400px', marginTop: '50px'}}>\n          <Range defaultValue={256} value={300}\n            onProcess={this.onProcess.bind(this)}\n            min={0} max={1024} marks={[0, 1024]} />\n        </div>\n        <p>double slider controlled</p>\n          <div style={{width: '400px', marginTop: '50px'}}>\n            <Range slider=\"double\" value={this.state.doubleValue} onChange={this.onChangeDouble.bind(this)}\n              onProcess={this.onProcess.bind(this)}\n              min={0} max={1024} marks={[0, 1024]} />\n          </div>\n      </div>\n    )\n  }\n};\n  export const _demoSrcFiles = __demo_loader_placeholder__"],"sourceRoot":""}