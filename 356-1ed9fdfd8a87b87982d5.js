(window.webpackJsonp=window.webpackJsonp||[]).push([[356],{"3fTk":function(n,e,t){"use strict";t.r(e),t.d(e,"default",(function(){return i})),t.d(e,"_demoSrcFiles",(function(){return d}));t("VlJN"),t("YjJN"),t("Eb4t"),t("IYjZ"),t("yvkl"),t("abGl"),t("kr69"),t("dtV+"),t("Fdmb");var r=t("mXGw"),o=t.n(r),a=t("BgHK");function s(n){return function(n){if(Array.isArray(n)){for(var e=0,t=new Array(n.length);e<n.length;e++)t[e]=n[e];return t}}(n)||function(n){if(Symbol.iterator in Object(n)||"[object Arguments]"===Object.prototype.toString.call(n))return Array.from(n)}(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var i=function(n){var e,t;function r(e){var t;return(t=n.call(this,e)||this).state={data:[{label:"Expand to load",key:"0"},{label:"Expand to load",key:"1"},{label:"Leaf",key:"2",isLeaf:!0}]},t.onLoadData=t.onLoadData.bind(function(n){if(void 0===n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return n}(t)),t}t=n,(e=r).prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t;var i=r.prototype;return i.onLoadData=function(n){var e=this;return new Promise((function(t){if(n.props.children)return t();var r=n.props,o=r.eventKey,a=r.pos,i=e.getItemByPos(a);setTimeout((function(){i.children=[{label:"Child Tree",key:o+"-0"},{label:"Child Tree",key:o+"-1"}],e.setState({data:s(e.state.data)}),t()}),1e3)}))},i.getItemByPos=function(n){return n.split("-").slice(1).reduce((function(n,e){return n.children[e]}),{children:this.state.data})},i.render=function(){return o.a.createElement(a.Tree,{dataSource:this.state.data,loadData:this.onLoadData})},r}(o.a.Component),d={".babelrc":'{\n  "presets": ["env"],\n  "plugins": [\n    "transform-runtime",\n    [\n      "transform-react-jsx",\n      {\n        "pragma": "React.createElement"\n      }\n    ],\n    "@babel/plugin-proposal-class-properties"\n  ],\n  "parserOpts": {\n    "plugins": ["dynamicImport"]\n  }\n}\n',"index.html":'<!DOCTYPE html>\n<html>\n  <head>\n    <title>Parcel Sandbox</title>\n    <meta charset="UTF-8" />\n  </head>\n\n  <body>\n    <div id="app"></div>\n\n    <script src="src/index.jsx"><\/script>\n  </body>\n</html>\n',"package.json":'{\n  "name": "parcel-sandbox",\n  "version": "1.0.0",\n  "description": "Simple Parcel Sandbox",\n  "main": "index.html",\n  "scripts": {\n    "start": "parcel index.html --open",\n    "build": "parcel build index.html"\n  },\n  "dependencies": {\n    "react": "16.8.6",\n    "react-dom": "16.8.6",\n    "@alicloud/console-components": "latest",\n    "styled-components": "^4.2.0",\n    "moment": "^2.21.0",\n    "react-copy-to-clipboard": "^5.0.1",\n    "react-dnd": "^8.0.0",\n    "react-dnd-html5-backend": "^8.0.0"\n  },\n  "devDependencies": {\n    "@babel/core": "7.2.0",\n    "parcel-bundler": "^1.6.1",\n    "typescript": "^3.7.2",\n    "@types/styled-components": "^4.1.8",\n    "@types/react": "16.8.8",\n    "@types/react-dom": "16.8.2"\n  }\n}\n',"sandbox.config.json":'{\n  "infiniteLoopProtection": true,\n  "hardReloadOnChange": false,\n  "view": "browser"\n}',"src/styles.less":"","src/index.jsx":'import * as React from "react";\nimport { render } from "react-dom";\nimport "@alicloud/console-components/dist/wind.css";\nimport App from "./demo/demo8";\nimport "./styles.less";\n\nconst rootElement = document.getElementById("app");\nrender(<App />, rootElement);\n',"src/demo/demo8.js":"import React from 'react'\nimport { Tree } from '@alicloud/console-components'\n\nexport default class Demo8 extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      data: [\n        { label: 'Expand to load', key: '0', },\n        { label: 'Expand to load', key: '1' },\n        { label: 'Leaf', key: '2', isLeaf: true }\n      ]\n    }\n    this.onLoadData = this.onLoadData.bind(this)\n  }\n\n  onLoadData(node) {\n    return new Promise(resolve => {\n      if (node.props.children) {\n        return resolve();\n      }\n\n      const { eventKey, pos } = node.props\n      const item = this.getItemByPos(pos)\n      setTimeout(() => {\n        item.children = [\n          { label: 'Child Tree', key: `${eventKey}-0` },\n          { label: 'Child Tree', key: `${eventKey}-1` }\n        ]\n        this.setState({\n          data: [...this.state.data]\n        })\n        resolve();\n      }, 1000)\n    })\n  }\n\n  getItemByPos(pos) {\n    return pos.split('-').slice(1).reduce((ret, num) => ret.children[num], { children: this.state.data });\n  }\n\n  render() {\n    return (\n      <Tree dataSource={this.state.data} loadData={this.onLoadData} />\n    )\n  }\n}\n","demoMeta.json":'{"entryPath":"src/demo/demo8.js"}'}}}]);
//# sourceMappingURL=356-1ed9fdfd8a87b87982d5.js.map