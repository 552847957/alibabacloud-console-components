(window.webpackJsonp=window.webpackJsonp||[]).push([[188],{N4m2:function(n,e,t){"use strict";t.r(e),t.d(e,"demoMeta",(function(){return c})),t.d(e,"_demoSrcFiles",(function(){return m}));var a=t("mXGw"),o=t.n(a),l=t("BgHK"),r=void 0,i=function(n){console.log(n),r.setState({control:n})},s=function(n,e){console.log("onKeyDown",e)};e.default=function(){var n=Object(a.useState)("maxLen control"),e=n[0],t=n[1];return o.a.createElement("div",null,o.a.createElement(l.Input,{maxLength:10,size:"large",placeholder:"Large",value:e,hasLimitHint:!0,"aria-label":"input max length 10",onChange:i,onKeyDown:s}),o.a.createElement("br",null),o.a.createElement("br",null),o.a.createElement(l.Input,{maxLength:20,placeholder:"medium",hasLimitHint:!0,cutString:!1,"aria-label":"input max length 20",onChange:function(n){t(n),console.log(n)},onKeyDown:function(n,e){console.log("onKeyDown",e)}}),o.a.createElement("br",null),o.a.createElement("br",null),o.a.createElement(l.Input,{hasLimitHint:!0,size:"small",placeholder:"small",maxLength:100,"aria-label":"input max length 100"}),o.a.createElement("br",null),o.a.createElement("br",null),o.a.createElement(l.Input.TextArea,{placeholder:"TextArea",maxLength:100,rows:4,hasLimitHint:!0,"aria-label":"input max length 100"}),o.a.createElement("br",null),o.a.createElement("br",null),o.a.createElement(l.Input,{maxLength:5,placeholder:"Original maxLength","aria-label":"input max length 5"}))};var c={zhName:"最大长度",zhDesc:"最大长度 `hasLimitHint` 会展现限制数字; cutString 可控制是否要切割字符串, 用于只展示最大长度"},m={".babelrc":'{\n  "presets": ["env"],\n  "plugins": [\n    "transform-runtime",\n    [\n      "transform-react-jsx",\n      {\n        "pragma": "React.createElement"\n      }\n    ],\n    "@babel/plugin-proposal-class-properties"\n  ],\n  "parserOpts": {\n    "plugins": ["dynamicImport"]\n  }\n}\n',"index.html":'<!DOCTYPE html>\n<html>\n  <head>\n    <title>Parcel Sandbox</title>\n    <meta charset="UTF-8" />\n  </head>\n\n  <body>\n    <div id="app"></div>\n\n    <script src="src/index.jsx"><\/script>\n  </body>\n</html>\n',"package.json":'{\n  "name": "parcel-sandbox",\n  "version": "1.0.0",\n  "description": "Simple Parcel Sandbox",\n  "main": "index.html",\n  "scripts": {\n    "start": "parcel index.html --open",\n    "build": "parcel build index.html"\n  },\n  "dependencies": {\n    "react": "16.8.6",\n    "react-dom": "16.8.6",\n    "@alicloud/console-components": "latest",\n    "styled-components": "^4.2.0",\n    "moment": "^2.21.0",\n    "react-copy-to-clipboard": "^5.0.1",\n    "react-dnd": "^8.0.0",\n    "react-dnd-html5-backend": "^8.0.0"\n  },\n  "devDependencies": {\n    "@babel/core": "7.2.0",\n    "parcel-bundler": "^1.6.1",\n    "typescript": "^3.7.2",\n    "@types/styled-components": "^4.1.8",\n    "@types/react": "16.8.8",\n    "@types/react-dom": "16.8.2"\n  }\n}\n',"sandbox.config.json":'{\n  "infiniteLoopProtection": true,\n  "hardReloadOnChange": false,\n  "view": "browser"\n}',"src/index.jsx":'import * as React from "react";\nimport { render } from "react-dom";\nimport "@alicloud/console-components/dist/wind.css";\nimport App from "./demo/demo6";\nimport "./styles.less";\n\nconst rootElement = document.getElementById("app");\nrender(<App />, rootElement);\n',"src/styles.less":"","src/demo/demo6.js":'import React, { useState } from \'react\'\nimport { Input } from \'@alicloud/console-components\'\n\nconst handleChange = v => {\n  console.log(v)\n  this.setState({\n    control: v,\n  })\n}\n\nconst handleKeyDown = (e, opts) => {\n  console.log(\'onKeyDown\', opts)\n}\n\nconst Demo5 = () => {\n  const [control, setControl] = useState(\'maxLen control\')\n  return (\n    <div>\n      <Input\n        maxLength={10}\n        size="large"\n        placeholder="Large"\n        value={control}\n        hasLimitHint\n        aria-label="input max length 10"\n        onChange={handleChange}\n        onKeyDown={handleKeyDown}\n      />\n      <br />\n      <br />\n\n      <Input\n        maxLength={20}\n        placeholder="medium"\n        hasLimitHint\n        cutString={false}\n        aria-label="input max length 20"\n        onChange={v => {\n          setControl(v)\n          console.log(v)\n        }}\n        onKeyDown={(e, opts) => {\n          console.log(\'onKeyDown\', opts)\n        }}\n      />\n      <br />\n      <br />\n\n      <Input\n        hasLimitHint\n        size="small"\n        placeholder="small"\n        maxLength={100}\n        aria-label="input max length 100"\n      />\n      <br />\n      <br />\n\n      <Input.TextArea\n        placeholder="TextArea"\n        maxLength={100}\n        rows={4}\n        hasLimitHint\n        aria-label="input max length 100"\n      />\n      <br />\n      <br />\n\n      <Input\n        maxLength={5}\n        placeholder="Original maxLength"\n        aria-label="input max length 5"\n      />\n    </div>\n  )\n}\n\nexport default Demo5\n\nexport const demoMeta = {\n  zhName: \'最大长度\',\n  zhDesc:\n    \'最大长度 `hasLimitHint` 会展现限制数字; cutString 可控制是否要切割字符串, 用于只展示最大长度\',\n}\n',"demoMeta.json":'{"entryPath":"src/demo/demo6.js"}'}}}]);
//# sourceMappingURL=188-a14ae2ce096ca3664614.js.map