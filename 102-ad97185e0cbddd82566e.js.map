{"version":3,"sources":["webpack:///../packages/component/src/components/field/demo/demo5.js"],"names":["CheckboxGroup","Checkbox","Group","list","value","label","Demo5","state","checkboxStatus","field","Field","scrollToFirstError","isChecked","rule","callback","userName","setTimeout","render","init","this","SWrapper","initValue","rules","required","getError","style","color","join","placeholder","message","trigger","defaultValue","validator","getState","valueName","TextArea","minLength","maxLength","dataSource","type","marginBottom","onClick","validate","errors","values","console","log","reset","setState","remove","React","Component","demoMeta","zhName","zhDesc","styled","div","_demoSrcFiles","__demo_loader_placeholder__"],"mappings":"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","file":"102-ad97185e0cbddd82566e.js","sourcesContent":["import React from 'react'\nimport { Input, Button, Field, Checkbox } from '@alicloud/console-components'\nimport styled from 'styled-components'\n\nconst CheckboxGroup = Checkbox.Group\n\nconst list = [\n  {\n    value: 'apple',\n    label: 'apple',\n  },\n  {\n    value: 'pear',\n    label: 'pear',\n  },\n  {\n    value: 'orange',\n    label: 'orange',\n  },\n]\n\nexport default class Demo5 extends React.Component {\n  state = {\n    checkboxStatus: true,\n  }\n\n  field = new Field(this, { scrollToFirstError: -10 })\n\n  isChecked(rule, value, callback) {\n    if (!value) {\n      callback('consent agreement not checked ')\n    } else {\n      callback()\n    }\n  }\n\n  userName(rule, value, callback) {\n    if (value === 'frank') {\n      setTimeout(() => callback('name existed'), 200)\n    } else {\n      setTimeout(() => callback(), 200)\n    }\n  }\n\n  render() {\n    const { init } = this.field\n\n    return (\n      <SWrapper>\n        <Input\n          {...init('input', {\n            initValue: 'delete all',\n            rules: { required: true },\n          })}\n        />\n        {this.field.getError('input') ? (\n          <span style={{ color: 'red' }}>\n            {this.field.getError('input').join(',')}\n          </span>\n        ) : (\n          ''\n        )}\n        <br />\n        <br />\n        <Input\n          placeholder=\"try onBlur\"\n          {...init('input1', {\n            rules: [\n              {\n                required: true,\n                message: 'can not be empty',\n                trigger: ['onBlur'],\n              },\n            ],\n          })}\n        />\n        {this.field.getError('input1') ? (\n          <span style={{ color: 'red' }}>\n            {this.field.getError('input1').join(',')}\n          </span>\n        ) : (\n          ''\n        )}\n        <br />\n        <br />\n        <Input\n          defaultValue=\"\"\n          placeholder=\"try frank\"\n          {...init('username', {\n            rules: [\n              {\n                validator: this.userName,\n                trigger: ['onBlur', 'onChange'],\n              },\n            ],\n          })}\n        />\n        {this.field.getState('username') === 'loading' ? 'validating...' : ''}\n        {this.field.getError('username') ? (\n          <span style={{ color: 'red' }}>\n            {this.field.getError('username').join(',')}\n          </span>\n        ) : (\n          ''\n        )}\n        <br />\n        <br />\n        agreement:\n        <Checkbox\n          {...init('checkbox', {\n            valueName: 'checked',\n            rules: [{ validator: this.isChecked }],\n          })}\n        />\n        {this.field.getError('checkbox') ? (\n          <span style={{ color: 'red' }}>\n            {this.field.getError('checkbox').join(',')}\n          </span>\n        ) : (\n          ''\n        )}\n        <br />\n        <br />\n        <Input.TextArea\n          placeholder=\">3 and <10\"\n          {...init('textarea', {\n            rules: [\n              {\n                required: true,\n                minLength: 3,\n                maxLength: 10,\n              },\n            ],\n          })}\n        />\n        {this.field.getError('textarea') ? (\n          <span style={{ color: 'red' }}>\n            {this.field.getError('textarea').join(',')}\n          </span>\n        ) : (\n          ''\n        )}\n        <br />\n        <br />\n        {this.state.checkboxStatus ? (\n          <div>\n            Array validate：\n            <CheckboxGroup\n              dataSource={list}\n              {...init('checkboxgroup', {\n                rules: [\n                  {\n                    required: true,\n                    type: 'array',\n                    message: 'choose one please',\n                  },\n                ],\n              })}\n              style={{ marginBottom: 10 }}\n            />\n            {this.field.getError('checkboxgroup') ? (\n              <span style={{ color: 'red' }}>\n                {this.field.getError('checkboxgroup').join(',')}\n              </span>\n            ) : (\n              ''\n            )}\n          </div>\n        ) : null}\n        <br />\n        <br />\n        <Button\n          type=\"primary\"\n          onClick={() => {\n            this.field.validate((errors, values) => {\n              console.log(errors, values)\n            })\n          }}\n        >\n          validate\n        </Button>\n        <Button\n          onClick={() => {\n            this.field.reset()\n          }}\n        >\n          reset\n        </Button>\n        <Button\n          onClick={() => {\n            if (this.state.checkboxStatus) {\n              this.setState({ checkboxStatus: false })\n              this.field.remove('checkboxgroup')\n            } else {\n              this.setState({ checkboxStatus: true })\n            }\n          }}\n        >\n          {this.state.checkboxStatus ? 'delete' : 'restore'}\n        </Button>\n      </SWrapper>\n    )\n  }\n}\n\nexport const demoMeta = {\n  zhName: `校验`,\n  zhDesc: `校验的错误信息需要用\\`getError\\`获取\n\n\t注意：Form 和 Field 做了深度结合，在 Form 中使用Field，错误信息不需\\`getError\\`获取会自动展现。`,\n}\n\nconst SWrapper = styled.div`\n  .next-btn {\n    margin-right: 8px;\n  }\n`\n;\n  export const _demoSrcFiles = __demo_loader_placeholder__"],"sourceRoot":""}